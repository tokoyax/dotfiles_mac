[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # copilot
repo = 'github/copilot.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'
hook_add = '''
" filetype=vim 以外の setfiletype を無効にする
" * は全ての filetype に適用する
let g:precious_enable_switchers = {
  \ "*" : {
    \ "setfiletype" : 0
      \ },
  \ "toml" : {
    \ "setfiletype" : 1
      \ },
  \ "vim" : {
    \ "setfiletype" : 1
      \ },
  \}
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  " Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Shougo/vimproc'
build = '''
  {
    'windows': 'make -f make_mingw32.mak',
    'cygwin':  'make -f make_cygwin.mak',
    'mac':     'make -f make_mac.mak',
    'unix':    'make -f make_unix.mak',
  }
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'cocopon/vaffle.vim'
hook_add = '''
  nnoremap <silent> <C-f> :<C-u>Vaffle %:p:h<CR>
  let g:vaffle_show_hidden_files = 1
  let g:vaffle_force_delete = 1
  let g:vaffle_open_selected_split_position = 'rightbelow'
  let g:vaffle_open_selected_vsplit_position = 'rightbelow'
  function! s:customize_vaffle_mappings() abort
    " Customize key mappings here
    nmap <buffer> s <Plug>(vaffle-open-selected-split)
    nmap <buffer> v <Plug>(vaffle-open-selected-vsplit)
    nmap <buffer> M <Plug>(vaffle-toggle-current)
    vmap <buffer> M <Plug>(vaffle-toggle-current)
  endfunction
  augroup vimrc_vaffle
    autocmd!
    autocmd FileType vaffle call s:customize_vaffle_mappings()
  augroup END
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
          \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <C-m>
          \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> v
          \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> t
          \ denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> d
          \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
          \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
          \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>
          \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
          \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
          \ denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction

  " Change denite default options
  call denite#custom#option('default', {
      \ 'split': 'floating'
      \ })

  call denite#custom#option('default', {
      \ 'prompt': '>',
      \ 'highlight_matched_char': 'Underlined'
      \ })

  " ag があればそれで grep
  if executable('ag')
    " file/rec
    call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
    " grep
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif

  " ファイル検索
  nnoremap <silent> <Leader>df :<C-u>DeniteProjectDir file/rec -start-filter<CR>
  " バッファリスト
  nnoremap <silent> <Leader>db :<C-u>Denite buffer<CR>
  " MRU
  nnoremap <silent> <Leader>dm :<C-u>Denite file/old<CR>
  " カーソル以下の単語をgrep
  nnoremap <silent> <Leader>dcg :<C-u>DeniteCursorWord grep -buffer-name=search line<CR><C-R><C-W><CR>
  " 普通にgrep
  nnoremap <silent> <Leader>dg :<C-u>Denite -buffer-name=search grep<CR>
  " resume previous buffer
  nnoremap <silent> <Leader>dr :<C-u>Denite -resume -buffer-name=search<CR>
  " quickfix list
  nnoremap <silent> <Leader>dq :<C-u>Denite quickfix<CR>
  " location list
  nnoremap <silent> <Leader>dl :<C-u>Denite location_list<CR>
  " history
  nnoremap <silent> <Leader>dh :<C-u>Denite command_history<CR>
  " customize ignore globs
  call denite#custom#source(
        \ 'file/rec',
        \ 'matchers', ['matcher/fuzzy', 'matcher/ignore_globs', 'matcher/cpsm', 'matcher/project_files'])
  call denite#custom#source(
        \ 'file/old',
        \ 'matchers', ['matcher/fuzzy', 'matcher/ignore_globs', 'matcher/cpsm', 'matcher/project_files'])
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [
        \ '.git/', 'build/', '__pycache__/',
        \ 'node_modules/',
        \ 'images/', '*.o', '*.make',
        \ '*.min.*',
        \ 'img/', 'fonts/'])
  " grepの結果のファイル名でも絞りこめるようにする
  call denite#custom#source('grep', 'converters', ['converter/abbr_word'])
  " qfreplace と 連携
  " https://qiita.com/hrsh7th@github/items/303d46ba13532c502828
  if dein#tap('denite.nvim') && dein#tap('vim-qfreplace')
    function! MyDeniteReplace(context)
      let qflist = []
      for target in a:context['targets']
        if !has_key(target, 'action__path') | continue | endif
        if !has_key(target, 'action__line') | continue | endif
        if !has_key(target, 'action__text') | continue | endif

        call add(qflist, {
              \ 'filename': target['action__path'],
              \ 'lnum': target['action__line'],
              \ 'text': target['action__text']
              \ })
      endfor
      call setqflist(qflist)
      call qfreplace#start('')
    endfunction
    call denite#custom#action('file', 'qfreplace', function('MyDeniteReplace'))
  endif
'''

[[plugins]]
repo = 'chemzqm/denite-extra'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  " If you want to start window resize mode by `Ctrl+T`
  let g:winresizer_start_key = '<C-T>'
  " If you cancel and quit window resize mode by `z` (keycode 122)
  let g:winresizer_keycode_cancel = 122
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
" nmap <silent> <TAB> <Plug>(coc-range-select)
" xmap <silent> <TAB> <Plug>(coc-range-select)
" xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" " Show all diagnostics
" nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions
" nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" " Show commands
" nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document
" nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols
" nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list
" nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_fixers = {
  \   'ruby': ['rubocop'],
  \}
'''

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]] # surround.vim などを . でリピートできるように
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
hook_add = '''
  nnoremap <silent> <Leader>sjj :SplitjoinJoin<cr>
  nnoremap <silent> <Leader>sjs :SplitjoinSplit<cr>
'''

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'vim-scripts/matchit.zip'

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  let g:clever_f_ignore_case = 1
  let g:clever_f_use_migemo = 1
  let g:clever_f_chars_match_any_signs = ';'
'''

[[plugins]]
repo = 'vim-scripts/camelcasemotion'
hook_add = '''
  let g:clever_f_ignore_case = 1
  let g:clever_f_use_migemo = 1
  let g:clever_f_chars_match_any_signs = ';'
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  vmap <Enter> <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  " slim の syntax が効かなくなるため OFF
  " let g:indentLine_faster = 1
  let g:indentLine_color_term = 239
  let g:indentLine_color_gui = '#708090'
  let g:indentLine_char = '|'
'''

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'aereal/vim-colors-japanesque'


[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'hybrid',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'cocstatus': 'coc#status',
        \   'fugitive': 'LightlineFugitive'
        \ }
    \ }
  function! LightlineFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
  endfunction
'''

[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:loaded_matchparen = 1
'''

[[plugins]] # tmux 用のなにか
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nnoremap <leader>tt :TagbarToggle<CR>
" Elm
let g:tagbar_type_elm = {
      \ 'kinds' : [
      \ 'f:function:0:0',
      \ 'm:modules:0:0',
      \ 'i:imports:1:0',
      \ 't:types:1:0',
      \ 'a:type aliases:0:0',
      \ 'c:type constructors:0:0',
      \ 'p:ports:0:0',
      \ 's:functions:0:0',
      \ ]
      \}
" Ruby
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
    \ }
let g:tagbar_type_markdown = {
  \ 'ctagstype'	: 'markdown',
  \ 'kinds'		: [
    \ 'c:chapter:0:1',
    \ 's:section:0:1',
    \ 'S:subsection:0:1',
    \ 't:subsubsection:0:1',
    \ 'T:l4subsection:0:1',
    \ 'u:l5subsection:0:1',
  \ ],
  \ 'sro'			: '""',
  \ 'kind2scope'	: {
    \ 'c' : 'chapter',
    \ 's' : 'section',
    \ 'S' : 'subsection',
    \ 't' : 'subsubsection',
    \ 'T' : 'l4subsection',
  \ },
  \ 'scope2kind'	: {
    \ 'chapter' : 'c',
    \ 'section' : 's',
    \ 'subsection' : 'S',
    \ 'subsubsection' : 't',
    \ 'l4subsection' : 'T',
  \ },
\ }
'''

[[plugins]]
repo = 'lambdalisue/pastefix.vim'
hook_add = '''
  let g:pastefix_no_default_mappings = 1
  nnoremap <silent><expr> p pastefix#put("p")
  nnoremap <silent><expr> P pastefix#put("P")
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0 " Disable default mappings

  " Jump to anywhere you want with minimal keystrokes, with just one key binding.
  " `s{char}{label}`
  nmap s <Plug>(easymotion-overwin-f)
  " or
  " `s{char}{char}{label}`
  " Need one more keystroke, but on average, it may be more comfortable.
  nmap s <Plug>(easymotion-overwin-f2)

  " Turn on case-insensitive feature
  let g:EasyMotion_smartcase = 1

  " JK motions: Line motions
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
" Powerline系フォントを利用する
" see https://qiita.com/park-jh/items/557a9d5b470947aef2f5
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_theme = 'murmur'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = ''
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '㏑'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ' '
let g:airline_symbols.maxlinenr = ''
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
" let g:memolist_path = "$HOME/memo"

" suffix type (default markdown)
" let g:memolist_memo_suffix = "markdown"
" let g:memolist_memo_suffix = "txt"

" date format (default %Y-%m-%d %H:%M)
" let g:memolist_memo_date = "%Y-%m-%d %H:%M"
" let g:memolist_memo_date = "epoch"
" let g:memolist_memo_date = "%D %T"

" tags prompt (default 0)
let g:memolist_prompt_tags = 1

" categories prompt (default 0)
let g:memolist_prompt_categories = 1

" use qfixgrep (default 0)
" let g:memolist_qfixgrep = 0

" use vimfiler (default 0)
" let g:memolist_vimfiler = 0

" use fzf (default 0)
let g:memolist_fzf = 1

" remove filename prefix (default 0)
" let g:memolist_filename_prefix_none = 0

" use unite (default 0)
" let g:memolist_unite = 0

" use arbitrary unite source (default is 'file')
" let g:memolist_unite_source = "file_rec"

" use arbitrary unite option (default is empty)
" let g:memolist_unite_option = "-auto-preview -start-insert"

" use denite (default 0)
let g:memolist_denite = 1

" use arbitrary denite source (default is 'file_rec')
let g:memolist_denite_source = "file/rec"

" use arbitrary denite option (default is empty)
" let g:memolist_denite_option = "anything"

" use various Ex commands (default '')
" let g:memolist_ex_cmd = 'CtrlP'
" let g:memolist_ex_cmd = 'NERDTree'
" let g:memolist_ex_cmd = 'Defx'
" let g:memolist_ex_cmd = 'Clap files'

" use delimiter of array in yaml front matter (default is ' ')
" let g:memolist_delimiter_yaml_array = ','

" use when get items from yaml front matter
" first line string pattern of yaml front matter (default "==========")
" let g:memolist_delimiter_yaml_start = "---"

" last line string pattern of yaml front matter (default "- - -")
" let g:memolist_delimiter_yaml_end  = "---"
'''
