# =====================
# plugin manager
# =====================

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'
hook_add = '''
" filetype=vim 以外の setfiletype を無効にする
" * は全ての filetype に適用する
let g:precious_enable_switchers = {
  \ "*" : {
    \ "setfiletype" : 0
      \ },
  \ "toml" : {
    \ "setfiletype" : 1
      \ },
  \ "vim" : {
    \ "setfiletype" : 1
      \ },
  \}
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Shougo/vimproc'
build = '''
  {
    'windows': 'make -f make_mingw32.mak',
    'cygwin':  'make -f make_cygwin.mak',
    'mac':     'make -f make_mac.mak',
    'unix':    'make -f make_unix.mak',
  }
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
          \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <C-m>
          \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> v
          \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> t
          \ denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> d
          \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
          \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
          \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>
          \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
          \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
          \ denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction

  " Change denite default options
  call denite#custom#option('default', {
      \ 'split': 'floating'
      \ })

  call denite#custom#option('default', {
      \ 'prompt': '>',
      \ 'highlight_matched_char': 'Underlined'
      \ })

  " ag があればそれで grep
  if executable('ag')
    " file/rec
    call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
    " grep
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif

  " ファイル検索
  call denite#custom#alias('source', 'file/rec/git', 'file/rec')
  call denite#custom#var('file/rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])
  nnoremap <silent> <Leader>df :<C-u>Denite `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>
  "nnoremap <silent> <Leader>df :<C-u>DeniteProjectDir file/rec -start-filter<CR>
  " バッファリスト
  nnoremap <silent> <Leader>db :<C-u>Denite buffer<CR>
  " MRU
  nnoremap <silent> <Leader>dm :<C-u>Denite file/old<CR>
  " カーソル以下の単語をgrep
  nnoremap <silent> <Leader>dcg :<C-u>DeniteCursorWord grep -buffer-name=search line<CR><C-R><C-W><CR>
  " 普通にgrep
  nnoremap <silent> <Leader>dg :<C-u>Denite -buffer-name=search grep<CR>
  " resume previous buffer
  nnoremap <silent> <Leader>dr :<C-u>Denite -resume -buffer-name=search<CR>
  " quickfix list
  nnoremap <silent> <Leader>dq :<C-u>Denite quickfix<CR>
  " location list
  nnoremap <silent> <Leader>dl :<C-u>Denite location_list<CR>
  " history
  nnoremap <silent> <Leader>dh :<C-u>Denite command_history<CR>
  " customize ignore globs
  call denite#custom#source(
        \ 'file/rec',
        \ 'matchers', ['matcher/fuzzy', 'matcher/ignore_globs', 'matcher/cpsm', 'matcher/project_files'])
  call denite#custom#source(
        \ 'file/old',
        \ 'matchers', ['matcher/fuzzy', 'matcher/ignore_globs', 'matcher/cpsm', 'matcher/project_files'])
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [
        \ '.git/', 'build/', '__pycache__/',
        \ 'node_modules/',
        \ 'images/', '*.o', '*.make',
        \ '*.min.*',
        \ 'tmp/',
        \ 'img/', 'fonts/'])
  " grepの結果のファイル名でも絞りこめるようにする
  call denite#custom#source('grep', 'converters', ['converter/abbr_word'])
  " qfreplace と 連携
  " https://qiita.com/hrsh7th@github/items/303d46ba13532c502828
  if dein#tap('denite.nvim') && dein#tap('vim-qfreplace')
    function! MyDeniteReplace(context)
      let qflist = []
      for target in a:context['targets']
        if !has_key(target, 'action__path') | continue | endif
        if !has_key(target, 'action__line') | continue | endif
        if !has_key(target, 'action__text') | continue | endif

        call add(qflist, {
              \ 'filename': target['action__path'],
              \ 'lnum': target['action__line'],
              \ 'text': target['action__text']
              \ })
      endfor
      call setqflist(qflist)
      call qfreplace#start('')
    endfunction
    call denite#custom#action('file', 'qfreplace', function('MyDeniteReplace'))
  endif
'''

[[plugins]]
repo = 'chemzqm/denite-extra'

# =====================
# LSP
# =====================
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  " Remap keys for gotos
  nmap gd <plug>(lsp-definition)
  nmap gy <Plug>(lsp-type-definition)
  nmap gi <Plug>(lsp-implementation)
  nmap gr <Plug>(lsp-references)
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings_filetype_ruby = 'solargraph'
'''

# =====================
# completion
# =====================

[[plugins]] # copilot
repo = 'github/copilot.vim'
hook_add = '''
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true
'''

# https://note.com/dd_techblog/n/n97f2b6ca09d8
[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
" Customize global settings
" https://github.com/Shougo/ddc-around
call ddc#custom#patch_global('sources',
  \ [
    \ 'vim-lsp',
    \ 'around'
  \ ])

" Change source options
call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
  \   'matchers': ['matcher_head'],
  \   'sorters': ['sorter_rank']
  \ },
  \ 'around': {
  \   'mark': 'around',
  \ },
  \ 'vim-lsp': {
  \   'mark': 'lsp',
  \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
  \ }
\ })
" Change source options
call ddc#custom#patch_global('sourceParams', {
  \ 'around': {
  \   'maxSize': 500,
  \ },
  \ 'vim-lsp': {
  \   'maxSize': 500,
  \   'kindLabels': { 'Class': 'c' }
  \ }
\ })
" Change completion menu
call ddc#custom#patch_global('completionMenu', 'pum.vim')

" Mappings

inoremap <silent><expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged',
    \ ])

nnoremap :       <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  " Note: It disables default command line completion!
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ ddc#manual_complete()
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  " Overwrite sources
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources',
          \ ['cmdline', 'cmdline-history', 'around'])

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
  call ddc#enable()
endfunction
function! CommandlinePost() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
  cunmap <Tab>
endfunction

" Use ddc.
call ddc#enable()
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

# ポップアップウィンドウを表示する
[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''

# カーソル周辺の既出単語を補完するsource
[[plugins]]
repo = 'Shougo/ddc-around'

# ファイル名を補完するsource
[[plugins]]
repo = 'LumaKernel/ddc-file'

# nvim-lsp source
# これはneovim 組み込みのLSPクライアント用のsource
# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp'

# vim-lsp source
[[plugins]]
repo = 'shun/ddc-vim-lsp'

# 入力中の単語を補完の対象にするfilter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'

# 補完候補を適切にソートするfilter
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

# 補完候補の重複を防ぐためのfilter
[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

# 補完候補のドキュメントをhover表示
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_add = '''
call popup_preview#enable()
'''

# シグネチャーのヘルプを表示
[[plugins]]
repo = 'matsui54/denops-signature_help'
hook_add = '''
let g:lsp_signature_help_enabled = 0

call signature_help#enable()
'''

# snippet
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_add = '''
" NOTE: You can use other key to expand snippet.

" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
nmap        s   <Plug>(vsnip-select-text)
xmap        s   <Plug>(vsnip-select-text)
nmap        S   <Plug>(vsnip-cut-text)
xmap        S   <Plug>(vsnip-cut-text)

" If you want to use snippet for multiple filetypes, you can `g:vsnip_filetypes` for it.
let g:vsnip_filetypes = {}
let g:vsnip_filetypes.javascriptreact = ['javascript']
let g:vsnip_filetypes.typescriptreact = ['typescript']
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

# =====================
# window
# =====================
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  " If you want to start window resize mode by `Ctrl+T`
  let g:winresizer_start_key = '<C-T>'
  " If you cancel and quit window resize mode by `z` (keycode 122)
  let g:winresizer_keycode_cancel = 122
'''

[[plugins]] # quickfixの情報をステータスバーに表示する
repo = 'dannyob/quickfixstatus'

# =====================
# filer
# =====================
[[plugins]]
repo = 'mattn/vim-molder'
hook_add = '''
  let g:molder_show_hidden = 1
  nnoremap <C-f> :e %:h<cr>
'''

[[plugins]]
repo = 'mattn/vim-molder-operations'

# =====================
# fuzzy finder
# =====================
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_show_hidden = 1
'''

# =====================
# appearance
# =====================
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  " slim の syntax が効かなくなるため OFF
  " let g:indentLine_faster = 1
  let g:indentLine_color_term = 239
  let g:indentLine_color_gui = '#708090'
  let g:indentLine_char = '|'
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'iceberg',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'cocstatus': 'coc#status',
        \   'fugitive': 'LightlineFugitive'
        \ }
    \ }
  function! LightlineFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
  endfunction
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:loaded_matchparen = 1
'''

# =====================
# move
# =====================
[[plugins]] # %でのカーソルマッチング拡張
repo = 'vim-scripts/matchit.zip'

# =====================
# edit
# =====================
[[plugins]] # 自動カッコ閉じ
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]] # surround.vim などを . でリピートできるように
repo = 'tpope/vim-repeat'

[[plugins]] # do ~ end <-> { ~ }
repo = 'AndrewRadev/splitjoin.vim'
hook_add = '''
  nnoremap <silent> <Leader>sjj :SplitjoinJoin<cr>
  nnoremap <silent> <Leader>sjs :SplitjoinSplit<cr>
'''

[[plugins]] # コメントトグル
repo = 'tomtom/tcomment_vim'

# =====================
# Git
# =====================
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# =====================
# other
# =====================
[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'vim-scripts/camelcasemotion'
hook_add = '''
  let g:clever_f_ignore_case = 1
  let g:clever_f_use_migemo = 1
  let g:clever_f_chars_match_any_signs = ';'
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  vmap <Enter> <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # tmux 用のなにか
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nnoremap <leader>tt :TagbarToggle<CR>
" Elm
let g:tagbar_type_elm = {
      \ 'kinds' : [
      \ 'f:function:0:0',
      \ 'm:modules:0:0',
      \ 'i:imports:1:0',
      \ 't:types:1:0',
      \ 'a:type aliases:0:0',
      \ 'c:type constructors:0:0',
      \ 'p:ports:0:0',
      \ 's:functions:0:0',
      \ ]
      \}
" Ruby
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
    \ }
let g:tagbar_type_markdown = {
  \ 'ctagstype'	: 'markdown',
  \ 'kinds'		: [
    \ 'c:chapter:0:1',
    \ 's:section:0:1',
    \ 'S:subsection:0:1',
    \ 't:subsubsection:0:1',
    \ 'T:l4subsection:0:1',
    \ 'u:l5subsection:0:1',
  \ ],
  \ 'sro'			: '""',
  \ 'kind2scope'	: {
    \ 'c' : 'chapter',
    \ 's' : 'section',
    \ 'S' : 'subsection',
    \ 't' : 'subsubsection',
    \ 'T' : 'l4subsection',
  \ },
  \ 'scope2kind'	: {
    \ 'chapter' : 'c',
    \ 'section' : 's',
    \ 'subsection' : 'S',
    \ 'subsubsection' : 't',
    \ 'l4subsection' : 'T',
  \ },
\ }
'''

[[plugins]]
repo = 'lambdalisue/pastefix.vim'
hook_add = '''
  let g:pastefix_no_default_mappings = 1
  nnoremap <silent><expr> p pastefix#put("p")
  nnoremap <silent><expr> P pastefix#put("P")
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0 " Disable default mappings

  " Jump to anywhere you want with minimal keystrokes, with just one key binding.
  " `s{char}{label}`
  nmap s <Plug>(easymotion-overwin-f)
  " or
  " `s{char}{char}{label}`
  " Need one more keystroke, but on average, it may be more comfortable.
  nmap s <Plug>(easymotion-overwin-f2)

  " Turn on case-insensitive feature
  let g:EasyMotion_smartcase = 1

  " JK motions: Line motions
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
" Powerline系フォントを利用する
" see https://qiita.com/park-jh/items/557a9d5b470947aef2f5
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_theme = 'murmur'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = ''
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '㏑'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ' '
let g:airline_symbols.maxlinenr = ''
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
" let g:memolist_path = "$HOME/memo"

" suffix type (default markdown)
" let g:memolist_memo_suffix = "markdown"
" let g:memolist_memo_suffix = "txt"

" date format (default %Y-%m-%d %H:%M)
" let g:memolist_memo_date = "%Y-%m-%d %H:%M"
" let g:memolist_memo_date = "epoch"
" let g:memolist_memo_date = "%D %T"

" tags prompt (default 0)
let g:memolist_prompt_tags = 1

" categories prompt (default 0)
let g:memolist_prompt_categories = 1

" use qfixgrep (default 0)
" let g:memolist_qfixgrep = 0

" use vimfiler (default 0)
" let g:memolist_vimfiler = 0

" use fzf (default 0)
" let g:memolist_fzf = 1

" remove filename prefix (default 0)
" let g:memolist_filename_prefix_none = 0

" use unite (default 0)
" let g:memolist_unite = 0

" use arbitrary unite source (default is 'file')
" let g:memolist_unite_source = "file_rec"

" use arbitrary unite option (default is empty)
" let g:memolist_unite_option = "-auto-preview -start-insert"

" use denite (default 0)
let g:memolist_denite = 1

" use arbitrary denite source (default is 'file_rec')
let g:memolist_denite_source = "file/rec"

" use arbitrary denite option (default is empty)
" let g:memolist_denite_option = "anything"

" use various Ex commands (default '')
" let g:memolist_ex_cmd = 'CtrlP'
" let g:memolist_ex_cmd = 'NERDTree'
" let g:memolist_ex_cmd = 'Defx'
" let g:memolist_ex_cmd = 'Clap files'

" use delimiter of array in yaml front matter (default is ' ')
" let g:memolist_delimiter_yaml_array = ','

" use when get items from yaml front matter
" first line string pattern of yaml front matter (default "==========")
" let g:memolist_delimiter_yaml_start = "---"

" last line string pattern of yaml front matter (default "- - -")
" let g:memolist_delimiter_yaml_end  = "---"
'''
